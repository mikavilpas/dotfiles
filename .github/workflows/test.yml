---
name: Run cypress tests
on:
  pull_request: ~
  push:
    branches:
      - main

env:
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache
  CARGO_TERM_COLOR: always
  MISE_ENV: ci

jobs:
  build:
    name: Run tests
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        neovim_version: ["nightly"]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install GNU stow and setup the dotfiles
        run: |
          sudo apt-get install stow tree
          pwd
          ls -la
          echo "Installing dotfiles to HOME $HOME"
          stow --verbose 2 . --target="$HOME"
          echo "Installed dotfiles to HOME $HOME"
          echo "List files in HOME"
          ls -la ~/
          echo "List files in ~/.config"
          ls -la ~/.config/

      - name: Install the fish shell
        run: |
          sudo apt-add-repository ppa:fish-shell/release-4
          sudo apt update
          sudo apt install fish
          echo "Installed fish version $(fish --version)"

      - name: Setup the mold linker
        uses: rui314/setup-mold@725a8794d15fc7563f59595bd9556495c0564878 # v1

      # install the "mika" terminal application from source
      - name: Setup Rust toolchain
        run: rustup toolchain install nightly --profile minimal
        working-directory: scripts

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

      # cargo-binstall is used by mise to greatly speed up Rust installations
      - uses: cargo-bins/cargo-binstall@a66119fbb1c952daba62640c2609111fe0803621 # v1.15.7
      - uses: jdx/mise-action@e3d7b8d67a7958d1207f6ed871e83b1ea780e7b0 # v3.3.1

      - name: Build
        run: cargo install --locked --path scripts/
        working-directory: scripts

      - name: Install delta
        run: |
          wget https://github.com/dandavison/delta/releases/download/0.18.1/git-delta_0.18.1_amd64.deb
          sudo dpkg -i git-delta_0.18.1_amd64.deb

      - name: Install lazygit
        run: |
          # https://github.com/jesseduffield/lazygit?tab=readme-ov-file#ubuntu
          # https://api.github.com/repos/jesseduffield/lazygit/releases/latest
          LAZYGIT_VERSION="https://github.com/jesseduffield/lazygit/releases/download/v0.54.2/lazygit_0.54.2_Linux_x86_64.tar.gz"
          curl -Lo lazygit.tar.gz $LAZYGIT_VERSION
          tar xf lazygit.tar.gz lazygit
          sudo install lazygit -D -t /usr/local/bin/
          echo "Installed lazygit version ${LAZYGIT_VERSION}"
          echo "lazygit version $(lazygit --version)"
          echo "lazygit path $(which lazygit)"

      # https://github.com/cypress-io/github-action?tab=readme-ov-file#pnpm-workspaces
      - uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: .nvmrc
          cache: "pnpm"
      - uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: |
            ~/.cache/Cypress
          key: my-cache-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm install

      # need to work around https://github.com/cypress-io/github-action/issues/1246
      - run: pnpm --filter integration-tests exec cypress install
      - run: pnpm tui run

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        # add the line below to store screenshots only on failures
        # if: failure()
        if: failure()
        with:
          name: cypress-screenshots
          path: integration-tests/cypress/screenshots
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`


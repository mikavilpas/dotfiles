[user]
	name = Mika Vilpas
	email = mika.vilpas@gmail.com
[core]
	editor = nvim
  pager = delta
  ; commentChar = ";"

  # disable using git hooks completely.
  # - sometimes other developers add hooks that are slow. Sometimes it's me.
  # - some implementations of git hooks do not work at all when legacy projects
  #   when hooks are included from submodules or parent repositories
  # - some hook implementations don't work at all when rebasing
  # - git gui/tui wrappers don't make it clear when hooks are running
  # - I like creating many commits quickly and squashing them later. Hooks
  #   prevent this workflow.
  # - good projects should put important checks in CI pipelines/tests anyway,
  #   so the benefit is questionable
  # - many hooks can also be disabled with the `--no-verify` flag, so they are
  #   not a reliable way to enforce checks
  hooksPath = /dev/null

[diff]
  colorMoved = default

[interactive]
  diffFilter = delta --color-only --features=interactive

[include]
  path = ~/dotfiles/.config/delta/catppuccin-delta/catppuccin.gitconfig

[delta]
  features = decorations
  features = catppuccin-macchiato
  tabs = 4
  side-by-side = true
  line-numbers-left-format = ""
  line-numbers-right-format = "â”‚ "

[delta "interactive"]
  keep-plus-minus-markers = false

[delta "decorations"]
  commit-decoration-style = blue ol
  commit-style = raw
  file-style = omit
  hunk-header-decoration-style = blue box
  hunk-header-file-style = red
  hunk-header-line-number-style = "#067a00"
  hunk-header-style = file line-number syntax
[rerere]
  enabled = true
[rebase]
  ; https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/
  ;
  ; So You Think You Know Git Part 2 - DevWorld 2024
  ; https://youtu.be/Md44rcw13k4?t=1077
  updateRefs = true
[alias]
  ; https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs
  lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
  lg = lg1

  ; How to stash changes while keeping the changes in the working directory? (Git)
  ; https://stackoverflow.com/a/60557208/1336788
  stash-keep = "!f() { git stash store --message \"$(date +'%Y-%m-%d %H:%M:%S')\" \"$1\"; }; f $(git stash create)"

  ; quickly create a backup of the current branch
  backup-branch = !git branch $(git rev-parse --abbrev-ref HEAD)--backup-$(date +%Y%m%d%H%M%S)

[commit]
	verbose = true

[init]
	defaultBranch = main
[push]
	default = upstream
[fetch]
	prune = true
